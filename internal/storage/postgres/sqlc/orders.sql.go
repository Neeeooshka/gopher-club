// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package sqlc

import (
	"context"
	"time"
)

const addOrder = `-- name: AddOrder :one
with ins as (
    insert into gopher_orders (user_id, num) values ($1, $2)
    on conflict (num) do nothing
    returning id, user_id, num, date_insert, accrual, status, true as is_new
)
select id, user_id, num, date_insert, accrual, status, is_new from ins
union all
select id, user_id, num, date_insert, accrual, status, false as is_new from gopher_orders where num = $2
limit 1
`

type AddOrderParams struct {
	UserID int
	Num    string
}

type AddOrderRow struct {
	ID         int
	UserID     int
	Num        string
	DateInsert time.Time
	Accrual    float64
	Status     string
	IsNew      bool
}

func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) (AddOrderRow, error) {
	row := q.db.QueryRow(ctx, addOrder, arg.UserID, arg.Num)
	var i AddOrderRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Num,
		&i.DateInsert,
		&i.Accrual,
		&i.Status,
		&i.IsNew,
	)
	return i, err
}

const listUserOrders = `-- name: ListUserOrders :many
select id, user_id, num, date_insert, accrual, status from gopher_orders where user_id = $1 order by date_insert desc
`

func (q *Queries) ListUserOrders(ctx context.Context, userID int) ([]GopherOrder, error) {
	rows, err := q.db.Query(ctx, listUserOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GopherOrder
	for rows.Next() {
		var i GopherOrder
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Num,
			&i.DateInsert,
			&i.Accrual,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
