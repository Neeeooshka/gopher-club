// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	decimal "github.com/shopspring/decimal"
)

const addCredentials = `-- name: AddCredentials :exec
insert into gopher_user_params (user_id, p_name, p_value) values ($1, 'credentials', $2)
`

type AddCredentialsParams struct {
	UserID int
	PValue string
}

func (q *Queries) AddCredentials(ctx context.Context, arg AddCredentialsParams) error {
	_, err := q.db.Exec(ctx, addCredentials, arg.UserID, arg.PValue)
	return err
}

const addUser = `-- name: AddUser :one
with ins as (
    insert into gopher_users (login, password) values ($1, $2)
    on conflict (login) do nothing
    returning id
)
select id, true as is_new from ins
union all
select id, false as is_new from gopher_users where login = $1
limit 1
`

type AddUserParams struct {
	Login    string
	Password string
}

type AddUserRow struct {
	ID    int
	IsNew bool
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (AddUserRow, error) {
	row := q.db.QueryRow(ctx, addUser, arg.Login, arg.Password)
	var i AddUserRow
	err := row.Scan(&i.ID, &i.IsNew)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
select u.id, u.login, u.password, u.balance, up.p_value as credentials from gopher_users u
join gopher_user_params up on up.user_id = u.id and p_name = 'credentials'
where u.login = $1
limit 1
`

type GetUserByLoginRow struct {
	ID          int
	Login       string
	Password    string
	Balance     decimal.Decimal
	Credentials string
}

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (GetUserByLoginRow, error) {
	row := q.db.QueryRow(ctx, getUserByLogin, login)
	var i GetUserByLoginRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Balance,
		&i.Credentials,
	)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :exec
update gopher_users set balance = balance + $1 where id = $2
`

type UpdateBalanceParams struct {
	Balance decimal.Decimal
	ID      int
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) error {
	_, err := q.db.Exec(ctx, updateBalance, arg.Balance, arg.ID)
	return err
}
