// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: balance.sql

package sqlc

import (
	"context"
)

const getWithdrawals = `-- name: GetWithdrawals :many
select id, user_id, num, date_withdraw, sum from gopher_withdrawals where user_id = $1 order by date_withdraw desc
`

func (q *Queries) GetWithdrawals(ctx context.Context, userID int) ([]GopherWithdrawal, error) {
	rows, err := q.db.Query(ctx, getWithdrawals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GopherWithdrawal
	for rows.Next() {
		var i GopherWithdrawal
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Num,
			&i.DateWithdraw,
			&i.Sum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWithdrawn = `-- name: GetWithdrawn :one
with w as (select user_id, sum(sum) as withdrawn from gopher_withdrawals where user_id = $1 group by user_id)
select u.balance, w.withdrawn from gopher_users u
join w on w.user_id = u.id
limit 1
`

type GetWithdrawnRow struct {
	Balance   float32
	Withdrawn float32
}

func (q *Queries) GetWithdrawn(ctx context.Context, userID int) (GetWithdrawnRow, error) {
	row := q.db.QueryRow(ctx, getWithdrawn, userID)
	var i GetWithdrawnRow
	err := row.Scan(&i.Balance, &i.Withdrawn)
	return i, err
}

const withdrawBalance = `-- name: WithdrawBalance :exec
insert into gopher_withdrawals (user_id, num, sum) values ($1, $2, $3)
`

type WithdrawBalanceParams struct {
	UserID int
	Num    string
	Sum    float32
}

func (q *Queries) WithdrawBalance(ctx context.Context, arg WithdrawBalanceParams) error {
	_, err := q.db.Exec(ctx, withdrawBalance, arg.UserID, arg.Num, arg.Sum)
	return err
}
