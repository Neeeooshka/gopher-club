// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Neeeooshka/gopher-club/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// BalanceRepository is an autogenerated mock type for the BalanceRepository type
type BalanceRepository struct {
	mock.Mock
}

// GetWithdrawals provides a mock function with given fields: _a0, _a1
func (_m *BalanceRepository) GetWithdrawals(_a0 context.Context, _a1 models.User) ([]models.Withdraw, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawals")
	}

	var r0 []models.Withdraw
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) ([]models.Withdraw, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) []models.Withdraw); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Withdraw)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawn provides a mock function with given fields: _a0, _a1
func (_m *BalanceRepository) GetWithdrawn(_a0 context.Context, _a1 models.User) (float32, float32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawn")
	}

	var r0 float32
	var r1 float32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (float32, float32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) float32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) float32); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(float32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.User) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WithdrawBalance provides a mock function with given fields: _a0, _a1
func (_m *BalanceRepository) WithdrawBalance(_a0 context.Context, _a1 models.Withdraw) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Withdraw) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBalanceRepository creates a new instance of BalanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBalanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BalanceRepository {
	mock := &BalanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
