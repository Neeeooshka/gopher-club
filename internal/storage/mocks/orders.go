// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Neeeooshka/gopher-club/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// OrdersRepository is an autogenerated mock type for the OrdersRepository type
type OrdersRepository struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: _a0, _a1
func (_m *OrdersRepository) AddOrder(_a0 string, _a1 int) (models.Order, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (models.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, int) models.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserOrders provides a mock function with given fields: _a0, _a1
func (_m *OrdersRepository) ListUserOrders(_a0 context.Context, _a1 models.User) ([]models.Order, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListUserOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) ([]models.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) []models.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrdersRepository creates a new instance of OrdersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersRepository {
	mock := &OrdersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
