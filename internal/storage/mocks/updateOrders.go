// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Neeeooshka/gopher-club/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// OrdersUpdateRepository is an autogenerated mock type for the OrdersUpdateRepository type
type OrdersUpdateRepository struct {
	mock.Mock
}

// ListWaitingOrders provides a mock function with given fields: _a0
func (_m *OrdersUpdateRepository) ListWaitingOrders(_a0 context.Context) ([]models.Order, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListWaitingOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrders provides a mock function with given fields: _a0, _a1
func (_m *OrdersUpdateRepository) UpdateOrders(_a0 context.Context, _a1 []models.Order) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Order) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrdersUpdateRepository creates a new instance of OrdersUpdateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersUpdateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersUpdateRepository {
	mock := &OrdersUpdateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
